// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/skill.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.Message {

  /// <summary>Holder for reflection information generated from Protos/skill.proto</summary>
  public static partial class SkillReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/skill.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SkillReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3Mvc2tpbGwucHJvdG8SCFVzZXJJbmZvIkYKCVNraWxsSW5mbxIK",
            "CgJpZBgBIAEoBRINCgVvd25lchgCIAEoBRIOCgZza05hbWUYAyABKAkSDgoG",
            "c2tEZXNjGAQgASgJMkEKDFNraWxsU2VydmljZRIxCgVRdWVyeRITLlVzZXJJ",
            "bmZvLlNraWxsSW5mbxoTLlVzZXJJbmZvLlNraWxsSW5mb0IPqgIMR3JwYy5N",
            "ZXNzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Message.SkillInfo), global::Grpc.Message.SkillInfo.Parser, new[]{ "Id", "Owner", "SkName", "SkDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Message.SkillReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      id_ = other.id_;
      owner_ = other.owner_;
      skName_ = other.skName_;
      skDesc_ = other.skDesc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private int owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "skName" field.</summary>
    public const int SkNameFieldNumber = 3;
    private string skName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkName {
      get { return skName_; }
      set {
        skName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skDesc" field.</summary>
    public const int SkDescFieldNumber = 4;
    private string skDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkDesc {
      get { return skDesc_; }
      set {
        skDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Owner != other.Owner) return false;
      if (SkName != other.SkName) return false;
      if (SkDesc != other.SkDesc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (SkName.Length != 0) hash ^= SkName.GetHashCode();
      if (SkDesc.Length != 0) hash ^= SkDesc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Owner);
      }
      if (SkName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SkName);
      }
      if (SkDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SkDesc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (SkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkName);
      }
      if (SkDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkDesc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.SkName.Length != 0) {
        SkName = other.SkName;
      }
      if (other.SkDesc.Length != 0) {
        SkDesc = other.SkDesc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Owner = input.ReadInt32();
            break;
          }
          case 26: {
            SkName = input.ReadString();
            break;
          }
          case 34: {
            SkDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
