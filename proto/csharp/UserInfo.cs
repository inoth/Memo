// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from UserInfo.proto</summary>
public static partial class UserInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for UserInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static UserInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Vc2VySW5mby5wcm90byJeCghVc2VySW5mbxIZCgRUeXBlGAEgASgOMgsu",
          "UHJvZmVzc2lvbhIKCgJJRBgCIAEoBRIMCgROYW1lGAMgASgJEg4KBlBhc3N3",
          "ZBgEIAEoCRINCgVMZXZlbBgFIAEoBSolCgpQcm9mZXNzaW9uEgoKBk1hc3Rl",
          "chAAEgsKB1dhcnJpb3IQAWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Profession), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UserInfo), global::UserInfo.Parser, new[]{ "Type", "ID", "Name", "Passwd", "Level" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Profession {
  [pbr::OriginalName("Master")] Master = 0,
  [pbr::OriginalName("Warrior")] Warrior = 1,
}

#endregion

#region Messages
public sealed partial class UserInfo : pb::IMessage<UserInfo> {
  private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UserInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo(UserInfo other) : this() {
    type_ = other.type_;
    iD_ = other.iD_;
    name_ = other.name_;
    passwd_ = other.passwd_;
    level_ = other.level_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserInfo Clone() {
    return new UserInfo(this);
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Profession type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Profession Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 2;
  private int iD_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ID {
    get { return iD_; }
    set {
      iD_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Passwd" field.</summary>
  public const int PasswdFieldNumber = 4;
  private string passwd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Passwd {
    get { return passwd_; }
    set {
      passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Level" field.</summary>
  public const int LevelFieldNumber = 5;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (ID != other.ID) return false;
    if (Name != other.Name) return false;
    if (Passwd != other.Passwd) return false;
    if (Level != other.Level) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (ID != 0) hash ^= ID.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (ID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ID);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Passwd.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Passwd);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (ID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Passwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserInfo other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.ID != 0) {
      ID = other.ID;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Passwd.Length != 0) {
      Passwd = other.Passwd;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::Profession) input.ReadEnum();
          break;
        }
        case 16: {
          ID = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Passwd = input.ReadString();
          break;
        }
        case 40: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
